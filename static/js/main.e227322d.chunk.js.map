{"version":3,"sources":["components/Nav.js","components/Gif.js","components/GifContainer.js","components/GlobalStyle.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["StyledNav","styled","nav","Nav","icon","faSmile","StyGif","div","props","height","width","Gif","url","iconRef","useRef","src","alt","ref","text","onClick","current","style","color","fontSize","setTimeout","removeAttribute","faShareSquare","StyGifContainer","GifContainer","isReady","gifs","map","gif","title","images","fixed_height","id","GlobalStyle","createGlobalStyle","StySearch","Search","setGifs","inputRef","type","placeholder","searchWord","value","fetch","then","data","json","faSearch","App","useState","setIsReady","useEffect","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAeMA,EAAYC,IAAOC,IAAV,qOAaAC,EAvBH,WACV,OACE,cAACH,EAAD,UACE,iDACc,cAAC,IAAD,CAAiBI,KAAMC,Y,QCkBrCC,EAASL,IAAOM,IAAV,ogCAcC,SAACC,GAAD,OAAYA,EAAMC,OAASD,EAAME,MAAQ,OAAS,UACjD,SAACF,GAAD,OACRA,EAAMC,OAASD,EAAME,OAEjBF,EAAMC,SAAWD,EAAME,MADvB,MAGA,UAsCKC,EA/EH,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,IAAKH,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACpBG,EAAUC,iBAAO,MAQvB,OACE,eAACR,EAAD,CAAQG,OAAQA,EAAQC,MAAOA,EAA/B,UACE,qBAAKK,IAAKH,EAAKI,IAAI,gBACnB,qBAAKC,IAAKJ,EAAV,SACE,cAAC,kBAAD,CAAiBK,KAAMN,EAAvB,SACE,cAAC,IAAD,CAAiBO,QAZE,WACzBN,EAAQO,QAAQC,MAAMC,MAAQ,QAC9BT,EAAQO,QAAQC,MAAME,SAAW,MACjCC,YAAW,WACTX,EAAQO,QAAQK,gBAAgB,WAC/B,MAOiDrB,KAAMsB,cCGxDC,EAAkB1B,IAAOM,IAAV,qSAcNqB,EAhCM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC/B,OACE,cAACH,EAAD,UACGE,EACGC,EAAKC,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,CACEC,MAAOD,EAAIC,MACXrB,IAAKoB,EAAIE,OAAOC,aAAavB,IAC7BH,OAAQuB,EAAIE,OAAOC,aAAa1B,OAChCC,MAAOsB,EAAIE,OAAOC,aAAazB,OAC1BsB,EAAII,OAGb,MCcKC,EA9BKC,YAAH,6mBC0BXC,EAAYtC,IAAOM,IAAV,uzBA4CAiC,EAnEA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAW5B,iBAAO,MAYxB,OACE,eAACyB,EAAD,WACE,uBAAOtB,IAAKyB,EAAUC,KAAK,OAAOC,YAAY,aAC9C,qBAAKzB,QAda,WACpB,IAAI0B,EAAaH,EAAStB,QAAQ0B,MAClCC,MAAM,mFAAD,OACgFF,EADhF,wCAGFG,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACLR,EAAQQ,EAAKA,MACbP,EAAStB,QAAQ0B,MAAQ,OAM3B,SACE,cAAC,IAAD,CAAiB1C,KAAM+C,YCchBC,MA5Bf,WAAgB,IAAD,EACWC,mBAAS,CAAC,GAAI,KADzB,mBACNvB,EADM,KACAW,EADA,OAEiBY,oBAAS,GAF1B,mBAENxB,EAFM,KAEGyB,EAFH,KAab,OAVAC,qBAAU,WAGRR,MADE,qGAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACLR,EAAQQ,EAAKA,MACbK,GAAW,QAEd,IAED,sBAAKE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAQf,QAASA,IACjB,cAAC,EAAD,CACEZ,QAASA,EACTyB,WAAYA,EACZb,QAASA,EACTX,KAAMA,QClBC2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e227322d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSmile } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <StyledNav>\r\n      <h1>\r\n        Buenos d√≠as <FontAwesomeIcon icon={faSmile} />\r\n      </h1>\r\n    </StyledNav>\r\n  );\r\n};\r\n\r\nconst StyledNav = styled.nav`\r\n  width: 100vw;\r\n  min-height: 15vh;\r\n  background: #fb8c00;\r\n  border-top: 1vw solid #af6200;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  h1 {\r\n    font-size: 3rem;\r\n  }\r\n`;\r\n\r\nexport default Nav;\r\n","import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faShareSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst Gif = ({ url, height, width }) => {\r\n  const iconRef = useRef(null);\r\n  const ColorChangeHandler = () => {\r\n    iconRef.current.style.color = \"green\";\r\n    iconRef.current.style.fontSize = \"3vw\";\r\n    setTimeout(() => {\r\n      iconRef.current.removeAttribute(\"style\");\r\n    }, 1000);\r\n  };\r\n  return (\r\n    <StyGif height={height} width={width}>\r\n      <img src={url} alt=\"Gif Cargado\" />\r\n      <div ref={iconRef}>\r\n        <CopyToClipboard text={url}>\r\n          <FontAwesomeIcon onClick={ColorChangeHandler} icon={faShareSquare} />\r\n        </CopyToClipboard>\r\n      </div>\r\n    </StyGif>\r\n  );\r\n};\r\n\r\nconst StyGif = styled.div`\r\n  margin-top: 1rem;\r\n  background: #fba333;\r\n  border: outset #af6200 8px;\r\n  width: 25vw;\r\n  height: 25vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  overflow: hidden;\r\n  img {\r\n    align-self: center;\r\n    justify-self: center;\r\n    width: ${(props) => (props.height < props.width ? \"100%\" : \"auto\")};\r\n    height: ${(props) =>\r\n      props.height > props.width\r\n        ? \"80%\"\r\n        : props.height === props.width\r\n        ? \"80%\"\r\n        : \"auto\"};\r\n    max-height: 80%;\r\n    object-fit: cover;\r\n  }\r\n  div {\r\n    display: flex;\r\n    color: #af6200;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 80%;\r\n    height: 4vw;\r\n    margin-bottom: 0.5vw;\r\n    font-size: 2.5vw;\r\n  }\r\n  svg {\r\n    transition: all 100ms ease;\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n    &:hover {\r\n      transition: all 200ms ease;\r\n      transform: rotate(10deg);\r\n    }\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    width: 90vw;\r\n    height: 90vw;\r\n    div {\r\n      font-size: 4vw;\r\n      width: 40vw;\r\n      height: 10vw;\r\n      margin-bottom: 5vw;\r\n    }\r\n    svg {\r\n      font-size: 10vw;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Gif;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Gif from \"./Gif\";\r\n\r\nconst GifContainer = ({ isReady, gifs }) => {\r\n  return (\r\n    <StyGifContainer>\r\n      {isReady\r\n        ? gifs.map((gif) => (\r\n            <Gif\r\n              title={gif.title}\r\n              url={gif.images.fixed_height.url}\r\n              height={gif.images.fixed_height.height}\r\n              width={gif.images.fixed_height.width}\r\n              key={gif.id}\r\n            />\r\n          ))\r\n        : \"\"}\r\n    </StyGifContainer>\r\n  );\r\n};\r\n\r\nconst StyGifContainer = styled.div`\r\n  padding: 2vw 5vw;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: space-between;\r\n  align-content: space-between;\r\n  flex-wrap: wrap;\r\n  margin-top: 4rem;\r\n  width: 90vw;\r\n  @media screen and (max-width: 768px) {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\nexport default GifContainer;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *{\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        font-family: 'Recursive', sans-serif;\r\n    }\r\n    .App{\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n    body{\r\n        background: white;\r\n        color: white;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        overflow-y: scroll;\r\n        overflow-x: hidden;\r\n    }\r\n    h1{\r\n        font-family: 'New Tegomin', serif;\r\n    }\r\n    h2{\r\n        font-size: 1.3rem;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Search = ({ setGifs }) => {\r\n  const inputRef = useRef(null);\r\n  const SearchHandler = () => {\r\n    let searchWord = inputRef.current.value;\r\n    fetch(\r\n      `https://api.giphy.com/v1/gifs/search?api_key=BfbPZGK6vQqT1aHDeHzE0SjBg2be4cil&q=${searchWord}&limit=12&offset=0&rating=g&lang=es`\r\n    )\r\n      .then((data) => data.json())\r\n      .then((data) => {\r\n        setGifs(data.data);\r\n        inputRef.current.value = \"\";\r\n      });\r\n  };\r\n  return (\r\n    <StySearch>\r\n      <input ref={inputRef} type=\"text\" placeholder=\"Buscar..\" />\r\n      <div onClick={SearchHandler}>\r\n        <FontAwesomeIcon icon={faSearch} />\r\n      </div>\r\n    </StySearch>\r\n  );\r\n};\r\n\r\nconst StySearch = styled.div`\r\n  margin-top: 5vw;\r\n  width: 100vw;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  input {\r\n    height: 5vw;\r\n    width: 30vw;\r\n    font-size: 2vw;\r\n    padding: 0.5vw;\r\n  }\r\n  div {\r\n    margin-left: 0.5vw;\r\n    border: solid 0.4vw #af6200;\r\n    background: #fba333;\r\n    height: 5vw;\r\n    width: 5vw;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2vw;\r\n    cursor: pointer;\r\n    transition: 200ms all ease;\r\n    &:hover {\r\n      background: #af6200;\r\n    }\r\n  }\r\n  @media screen and (max-width: 768px) {\r\n    height: 30vw;\r\n    input {\r\n      height: 20vw;\r\n      width: 60vw;\r\n      font-size: 8vw;\r\n    }\r\n    div {\r\n      border-width: 1vw;\r\n      height: 20vw;\r\n      width: 20vw;\r\n      font-size: 8vw;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Search;\r\n","import Nav from \"./components/Nav\";\nimport GifContainer from \"./components/GifContainer\";\nimport GlobalStyle from \"./components/GlobalStyle\";\nimport Search from \"./components/Search\";\nimport React, { useState, useEffect } from \"react\";\n\n// States\n\nfunction App() {\n  const [gifs, setGifs] = useState([\"\", \"\"]);\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    let URL =\n      \"https://api.giphy.com/v1/gifs/trending?api_key=BfbPZGK6vQqT1aHDeHzE0SjBg2be4cil&limit=12&rating=g\";\n    fetch(URL)\n      .then((data) => data.json())\n      .then((data) => {\n        setGifs(data.data);\n        setIsReady(true);\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Nav />\n      <Search setGifs={setGifs} />\n      <GifContainer\n        isReady={isReady}\n        setIsReady={setIsReady}\n        setGifs={setGifs}\n        gifs={gifs}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}